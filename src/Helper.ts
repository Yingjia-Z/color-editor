// the following functions are generated by ChatGPT
// with a few modifications to functions' input type

export function hslToRgb(hue, saturation, lightness) {
  // Convert saturation and lightness to the range of [0, 1]
  let s = saturation / 100;
  let l = lightness / 100;

  let c = (1 - Math.abs(2 * l - 1)) * s;
  let x = c * (1 - Math.abs(((hue / 60) % 2) - 1));
  let m = l - c / 2;

  let r1, g1, b1;

  if (hue >= 0 && hue < 60) {
    r1 = c;
    g1 = x;
    b1 = 0;
  } else if (hue >= 60 && hue < 120) {
    r1 = x;
    g1 = c;
    b1 = 0;
  } else if (hue >= 120 && hue < 180) {
    r1 = 0;
    g1 = c;
    b1 = x;
  } else if (hue >= 180 && hue < 240) {
    r1 = 0;
    g1 = x;
    b1 = c;
  } else if (hue >= 240 && hue < 300) {
    r1 = x;
    g1 = 0;
    b1 = c;
  } else if (hue >= 300 && hue < 360) {
    r1 = c;
    g1 = 0;
    b1 = x;
  } else {
    r1 = 0;
    g1 = 0;
    b1 = 0; // If hue is somehow outside 0-360 range
  }

  // Convert to RGB values on the [0, 255] scale
  let r = Math.round((r1 + m) * 255);
  let g = Math.round((g1 + m) * 255);
  let b = Math.round((b1 + m) * 255);

  return { r, g, b };
}

export function rgbToHex(rgb) {
  //   console.log(rgb);
  let r = rgb.r;
  let g = rgb.g;
  let b = rgb.b;
  const toHex = (c) => {
    if (typeof c !== "number" || isNaN(c)) {
      console.error("Invalid RGB component:", c);
      return "00";
    }
    const hex = c.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  };

  return "#" + toHex(r) + toHex(g) + toHex(b);
}

export function hexToRgb(hex) {
  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
  let shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);

  let result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
  return result
    ? {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
      }
    : null;
}

export function rgbToHsl(rgb) {
  let r = rgb.r;
  let g = rgb.g;
  let b = rgb.b;
  (r /= 255), (g /= 255), (b /= 255);

  let max = Math.max(r, g, b),
    min = Math.min(r, g, b);
  let h,
    s,
    l = (max + min) / 2;

  if (max === min) {
    h = s = 0; // achromatic
  } else {
    let d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / d + 2;
        break;
      case b:
        h = (r - g) / d + 4;
        break;
    }
    h /= 6;
  }

  return {
    h: Math.round(h * 360),
    s: Math.round(s * 100),
    l: Math.round(l * 100),
  };
}
